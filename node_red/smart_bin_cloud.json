[
    {
        "id": "1a9d116eb709129a",
        "type": "tab",
        "label": "Smart-Bin-Dashboard-cloud",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4ca0c09c36d5b679",
        "type": "firebase.on",
        "z": "1a9d116eb709129a",
        "name": "Firebase Retrieve Data",
        "firebaseconfig": "",
        "childpath": "data/smart-bin",
        "atStart": true,
        "eventType": "value",
        "queries": [
            {
                "name": "orderByChild",
                "value": "classification/timestamp"
            },
            {
                "name": "limitToLast",
                "value": "1"
            }
        ],
        "x": 160,
        "y": 240,
        "wires": [
            [
                "36d5f5da43627f9a"
            ]
        ]
    },
    {
        "id": "36d5f5da43627f9a",
        "type": "json",
        "z": "1a9d116eb709129a",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 390,
        "y": 240,
        "wires": [
            [
                "45891fc83c6a9a20"
            ]
        ]
    },
    {
        "id": "45891fc83c6a9a20",
        "type": "function",
        "z": "1a9d116eb709129a",
        "name": "Parse retrieved data ",
        "func": "let data = msg.payload;\n\n// Extract the first property from the data object\nlet firstKey = Object.keys(data)[0];  // Gets the first key from the object\nlet entry = data[firstKey];  // Access the data inside the first key\n\n// Extract the required data from the entry\nlet imageUrl = entry.classification.imageUrl;\nlet classificationResult = entry.classification.classificationResult;\nlet confidenceScore = entry.classification.confidenceScore;\nlet binLevel1 = entry.ultrasonicSensor.binLevel1;\nlet binLevel2 = entry.ultrasonicSensor.binLevel2;\n\n// Retrieve the timestamp and convert it to a readable format\nlet timestamp = entry.classification.timestamp;\n// Convert the timestamp to a readable date format\nlet formattedTime = timestamp.replace(/_/g, ' ').replace(/(\\d{4})(\\d{2})(\\d{2})/, '$3/$2/$1').replace(/(\\d{2})(\\d{2})(\\d{2})/, '$1:$2:$3');\n\n// Attach the extracted data to msg for further processing\nmsg.url = imageUrl;\nmsg.data = {\n    classificationResult,\n    confidenceScore,\n    binLevel1,\n    binLevel2,\n    timestamp:formattedTime\n};\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 240,
        "wires": [
            [
                "7deaf6355e17c074",
                "1f2d2e933be0d0a4"
            ]
        ]
    },
    {
        "id": "37fe86012bb9d043",
        "type": "http request",
        "z": "1a9d116eb709129a",
        "name": "GET Storage Image ",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "a28f6a887f8451c7",
        "type": "comment",
        "z": "1a9d116eb709129a",
        "name": "Pass URL to HTTP request GET",
        "info": "explictly set msg.url = your actual url\nIn the HTTP request node leave the url field empty",
        "x": 590,
        "y": 400,
        "wires": []
    },
    {
        "id": "6bdc7c535070984c",
        "type": "ui_gauge",
        "z": "1a9d116eb709129a",
        "name": "",
        "group": "163dde46bfd8c18d",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Bin Level 1",
        "label": "units",
        "format": "{{value}} %",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1470,
        "y": 160,
        "wires": []
    },
    {
        "id": "a5eb34080174d5cb",
        "type": "ui_gauge",
        "z": "1a9d116eb709129a",
        "name": "",
        "group": "163dde46bfd8c18d",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Bin Level 2",
        "label": "units",
        "format": "{{value}} %",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1470,
        "y": 300,
        "wires": []
    },
    {
        "id": "1f2d2e933be0d0a4",
        "type": "ui_template",
        "z": "1a9d116eb709129a",
        "group": "163dde46bfd8c18d",
        "name": "Classification Result",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div style=\"text-align:center; margin-bottom: 20px; border-bottom: 1px solid #ccc; padding-bottom: 10px;\">\n    <img src=\"{{msg.url}}\" alt=\"Classified Image\" width=\"250\" height=\"250\">\n    <h5>Most Recent Classification Result: {{msg.data.classificationResult}}</h2>\n    <h5>Time: {{msg.data.timestamp}}</h2>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1140,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "7deaf6355e17c074",
        "type": "function",
        "z": "1a9d116eb709129a",
        "name": "Convert To Percentage",
        "func": "// Retrieve bin level values from the message payload\nlet binLevel1 = parseFloat(msg.data.binLevel1); // Assuming binLevel1 is a string with units (e.g., \"54.03 cm\")\nlet binLevel2 = parseFloat(msg.data.binLevel2); // Same for binLevel2\n\n// Define the minimum and maximum distances\nlet minDistance = 5;  // Minimum distance (when the bin is full)\nlet maxDistance = 50; // Maximum distance (when the bin is empty)\n\n// Calculate the percentage level for binLevel1\nlet binLevel1Percent = Math.max(0, Math.min(100, ((maxDistance - binLevel1) / (maxDistance - minDistance)) * 100));\n\n// Calculate the percentage level for binLevel2\nlet binLevel2Percent = Math.max(0, Math.min(100, ((maxDistance - binLevel2) / (maxDistance - minDistance)) * 100));\n\n// Set the calculated percentages to the payload for further processing\nmsg.payload = {\n    binLevel1Percent: binLevel1Percent.toFixed(2), // Format to two decimal places\n    binLevel2Percent: binLevel2Percent.toFixed(2)  // Format to two decimal places\n};\n\n// Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 240,
        "wires": [
            [
                "e7339b2c598e4cd9"
            ]
        ]
    },
    {
        "id": "e7339b2c598e4cd9",
        "type": "split",
        "z": "1a9d116eb709129a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "property": "payload",
        "x": 1110,
        "y": 240,
        "wires": [
            [
                "f8f27dc25f4f86bd"
            ]
        ]
    },
    {
        "id": "f8f27dc25f4f86bd",
        "type": "switch",
        "z": "1a9d116eb709129a",
        "name": "",
        "property": "parts.key",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "binLevel1Percent",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "binLevel2Percent",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 240,
        "wires": [
            [
                "6bdc7c535070984c"
            ],
            [
                "a5eb34080174d5cb"
            ]
        ]
    },
    {
        "id": "3ae2eaf1d300fc45",
        "type": "comment",
        "z": "1a9d116eb709129a",
        "name": "Smart Bin Cloud Data Processing and Visualization Flow",
        "info": "This flow retrieves real-time data from Firebase, including bin levels and classification results. \nIt processes the data to calculate bin fullness percentages, fetches classified images, and displays the information on a Node-RED dashboard for monitoring.",
        "x": 790,
        "y": 100,
        "wires": []
    },
    {
        "id": "163dde46bfd8c18d",
        "type": "ui_group",
        "name": "Smart Recycle Bin",
        "tab": "766aa4d8f3ddd068",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "766aa4d8f3ddd068",
        "type": "ui_tab",
        "name": "SmartBin Cloud (Firebase)",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    }
]